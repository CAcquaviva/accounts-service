type: spec.insomnia.rest/5.0
name: accounts-service
meta:
  id: wrk_26506e996b4c4a3eb2336c75082811c2
  created: 1756758805296
  modified: 1756758805296
  description: ""
collection:
  - name: accounts
    meta:
      id: fld_88f1f6643771490597b9eb581cf44703
      created: 1756807158646
      modified: 1756808654252
      sortKey: -1756807158646
      description: Operations related to account management (retrieval and balance updates)
    children:
      - url: "{{ _.base_url }}/accounts"
        name: List all accounts
        meta:
          id: req_ca3c2b408e93438598c15a3a084c92d5
          created: 1756807158647
          modified: 1756807158647
          isPrivate: false
          description: Returns a list of all accounts with basic details.
          sortKey: -1756807158647
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts"
        name: Create a new account
        meta:
          id: req_9bd891858f9140c78082c984c1998cfb
          created: 1756807158648
          modified: 1756808529692
          isPrivate: false
          description: Creates a new account with an initial balance. The account ID is
            automatically generated.
          sortKey: -1756807158648
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "type": "savings",
              "initial_balance": 5000
            }
        headers:
          - name: Content-Type
            value: application/json
        scripts:
          preRequest: >-
            if (!insomnia.environment.get("accountId")) {
              const host = insomnia.environment.get("host");
              const scheme = insomnia.environment.get("scheme");
              const baseUrl = `${scheme}://${host}`;

              const createAccountRequest = {
                url: `${baseUrl}/accounts`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({
                    type: 'savings',
                    initial_balance: 5000.00,
                  }),
                },
              };

              const response = await new Promise((resolve, reject) => {
                insomnia.sendRequest(createAccountRequest, (err, resp) => {
                  if (err != null) reject(err);
                  else resolve(resp);
                });
              });

              if (response.code !== 201) {
                throw new Error(`Account creation failed. Status code: ${response.code}`);
              }

              const responseBody = JSON.parse(response.body.toString());
              insomnia.environment.set('accountId', responseBody.account_id);
            }
          afterResponse: >-
            // Extract account_id from the response and store it in the
            environment

            let data = insomnia.response.json();

            insomnia.environment.set("accountId", data.account_id);


            console.log(`Response status: ${insomnia.response.code}`);

            if (insomnia.response.code !== 201) {
              console.log("Warning: Unexpected status code");
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}/credit"
        name: Credit an account
        meta:
          id: req_4d8c92f4fecd4f2d92b794195a3dea75
          created: 1756807158649
          modified: 1756807158649
          isPrivate: false
          description: Increases the account's balance by the specified amount.
          sortKey: -1756807158649
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "amount": 100
            }
        headers:
          - name: Content-Type
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}/debit"
        name: Debit an account
        meta:
          id: req_b017045e7fc44f67837c9756709da9e8
          created: 1756807158649
          modified: 1756808598782
          isPrivate: false
          description: Decreases the account's balance by the specified amount.
          sortKey: -1756807158649
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "amount": 100
            }
        headers:
          - name: Content-Type
            value: application/json
        scripts:
          preRequest: >-
            if (!insomnia.environment.get("accountId")) {
              const host = insomnia.environment.get("host");
              const scheme = insomnia.environment.get("scheme");
              const baseUrl = `${scheme}://${host}`;

              const createAccountRequest = {
                url: `${baseUrl}/accounts`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({
                    type: 'savings',
                    initial_balance: 5000.00,
                  }),
                },
              };

              const response = await new Promise((resolve, reject) => {
                insomnia.sendRequest(createAccountRequest, (err, resp) => {
                  if (err != null) reject(err);
                  else resolve(resp);
                });
              });

              if (response.code !== 201) {
                throw new Error(`Account creation failed. Status code: ${response.code}`);
              }

              const responseBody = JSON.parse(response.body.toString());
              insomnia.environment.set('accountId', responseBody.account_id);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}"
        name: Retrieve a single account
        meta:
          id: req_b583b07e3022412caf6fc2a9872c8506
          created: 1756807158649
          modified: 1756808605062
          isPrivate: false
          description: Returns details for the specified account including current balance.
          sortKey: -1756807158649
        method: GET
        scripts:
          preRequest: >-
            if (!insomnia.environment.get("accountId")) {
              const host = insomnia.environment.get("host");
              const scheme = insomnia.environment.get("scheme");
              const baseUrl = `${scheme}://${host}`;

              const createAccountRequest = {
                url: `${baseUrl}/accounts`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({
                    type: 'savings',
                    initial_balance: 5000.00,
                  }),
                },
              };

              const response = await new Promise((resolve, reject) => {
                insomnia.sendRequest(createAccountRequest, (err, resp) => {
                  if (err != null) reject(err);
                  else resolve(resp);
                });
              });

              if (response.code !== 201) {
                throw new Error(`Account creation failed. Status code: ${response.code}`);
              }

              const responseBody = JSON.parse(response.body.toString());
              insomnia.environment.set('accountId', responseBody.account_id);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}"
        name: Delete an account
        meta:
          id: req_29dbeb2810964fe0aae5367d4fad6a36
          created: 1756833794231
          modified: 1756833944759
          isPrivate: false
          description: ""
          sortKey: -1756833794231
        method: DELETE
        headers:
          - name: User-Agent
            value: insomnia/11.5.0
        scripts:
          preRequest: >-
            // Extract account_id from the response and store it in the
            environment

            let data = insomnia.response.json();

            insomnia.environment.set("accountId", data.account_id);


            console.log(`Response status: ${insomnia.response.code}`);

            if (insomnia.response.code !== 201) {
              console.log("Warning: Unexpected status code");
            }
          afterResponse: insomnia.environment.unset("accoundId")
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: health
    meta:
      id: fld_a55a722f9452423d9fdf011ba06a46be
      created: 1756807158646
      modified: 1756807158646
      sortKey: -1756807158646
      description: Health check endpoints for monitoring service status
    children:
      - url: "{{ _.base_url }}/health"
        name: Health check endpoint
        meta:
          id: req_2f90f0b02bd54bf79b6abf7c19e285ea
          created: 1756807158647
          modified: 1756807158647
          isPrivate: false
          description: Returns the API's health status
          sortKey: -1756807158647
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/health"
        name: Health check endpoint (HEAD)
        meta:
          id: req_c784d66678d141019ea8375c8ce5bdf8
          created: 1756807158647
          modified: 1756807158647
          isPrivate: false
          description: Returns the API's health status without body
          sortKey: -1756807158647
        method: HEAD
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_c42a0188c105e234368fe1d2f1897336ec7e5887
    created: 1756758805301
    modified: 1756808654249
environments:
  name: Base Environment
  meta:
    id: env_c42a0188c105e234368fe1d2f1897336ec7e5887
    created: 1756758805300
    modified: 1756808654251
    isPrivate: false
  data:
    base_url: "{{ _.scheme }}://{{ _.host }}"
  subEnvironments:
    - name: OpenAPI env localhost:8081
      meta:
        id: env_1f9a04bf58cd40ada269f33e0643940c
        created: 1756807158642
        modified: 1756808654251
        isPrivate: false
        sortKey: 1756807158642
      data:
        scheme: http
        host: localhost:8081
        accountId: 116a1c3b-245f-4eca-8d6f-c256a620dfd9
spec:
  contents:
    openapi: 3.0.3
    info:
      title: Accounts API
      version: 2.0.0
      description: This API manages account information and balances.
      contact:
        email: stephen.brown@konghq.com
    servers:
      - url: http://localhost:8081
        description: Local development server
    tags:
      - name: accounts
        description: Operations related to account management (retrieval and balance
          updates)
      - name: health
        description: Health check endpoints for monitoring service status
    paths:
      /health:
        get:
          tags:
            - health
          operationId: healthCheck
          summary: Health check endpoint
          description: Returns the API's health status
          responses:
            "200":
              description: API is healthy
              content:
                application/json:
                  schema:
                    type: string
                  examples:
                    success:
                      summary: Healthy response
                      value: Accounts API is running
        head:
          tags:
            - health
          operationId: healthCheckHead
          summary: Health check endpoint (HEAD)
          description: Returns the API's health status without body
          responses:
            "200":
              description: API is healthy
      /accounts:
        get:
          tags:
            - accounts
          operationId: listAccounts
          summary: List all accounts
          description: Returns a list of all accounts with basic details.
          responses:
            "200":
              description: A list of accounts was successfully retrieved
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
                  examples:
                    multiple_accounts:
                      summary: Multiple accounts example
                      value:
                        - account_id: 123e4567-e89b-12d3-a456-426614174000
                          type: checking
                          balance: 1500
                        - account_id: 987fcdeb-51a2-43e7-89bc-765432198765
                          type: savings
                          balance: 5000
            "500":
              description: Failed to retrieve accounts due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    lock_error:
                      summary: Database lock error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Lock error: failed to acquire lock while listing accounts"
        post:
          tags:
            - accounts
          operationId: createAccount
          summary: Create a new account
          description: Creates a new account with an initial balance. The account ID is
            automatically generated.
          requestBody:
            description: Details for the new account including type and initial balance. The
              account ID will be automatically generated.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreateAccountRequest"
                examples:
                  checking_account:
                    summary: Create checking account
                    value:
                      type: checking
                      initial_balance: 1000
                  savings_account:
                    summary: Create savings account
                    value:
                      type: savings
                      initial_balance: 5000
          responses:
            "201":
              description: Account created successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    new_account:
                      summary: Newly created account
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 1000
            "400":
              description: Failed to create account due to invalid input
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    invalid_balance:
                      summary: Invalid initial balance
                      value:
                        error_code: INVALID_INPUT
                        message: "Failed to create account: Initial balance must be non-negative"
            "500":
              description: Failed to create account due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    creation_error:
                      summary: Account creation failed
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to create account: Internal server error occurred"
      /accounts/{accountId}:
        get:
          tags:
            - accounts
          operationId: getAccountById
          summary: Retrieve a single account
          description: Returns details for the specified account including current balance.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to retrieve
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          responses:
            "200":
              description: Account details retrieved successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    checking_account:
                      summary: Example checking account
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 1500
            "404":
              description: Account lookup failed - specified account ID does not exist
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found error
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to retrieve account: ID 123e4567-e89b-12d3-a456-426614174000
                          not found"
            "500":
              description: Failed to retrieve account details due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal server error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to retrieve account: Internal server error occurred"
        delete:
          tags:
            - accounts
          operationId: deleteAccount
          summary: Delete an account
          description: Permanently removes the specified account and all associated data.
            This operation cannot be undone.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to delete
              schema:
                type: string
                format: uuid
          responses:
            "204":
              description: Account successfully deleted (no content returned)
            "404":
              description: Account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
            "500":
              description: Internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
      /accounts/{accountId}/debit:
        post:
          tags:
            - accounts
          operationId: debitAccount
          summary: Debit an account
          description: Decreases the account's balance by the specified amount.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to debit
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          requestBody:
            description: Specifies the amount to debit from the account balance.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UpdateBalanceRequest"
                examples:
                  small_debit:
                    summary: Small debit amount
                    value:
                      amount: 100
                  large_debit:
                    summary: Large debit amount
                    value:
                      amount: 1000
          responses:
            "200":
              description: Account debited successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    successful_debit:
                      summary: Account after successful debit
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 900
            "400":
              description: Debit operation failed due to insufficient funds or invalid amount
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    insufficient_funds:
                      summary: Insufficient funds error
                      value:
                        error_code: INSUFFICIENT_FUNDS
                        message: "Failed to debit account: Insufficient funds - balance is 900.00,
                          attempted to debit 1000.00"
            "404":
              description: Debit operation failed - account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to debit account: Account does not exist"
            "500":
              description: Failed to process debit operation due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to debit account: Internal server error occurred"
      /accounts/{accountId}/credit:
        post:
          tags:
            - accounts
          operationId: creditAccount
          summary: Credit an account
          description: Increases the account's balance by the specified amount.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to credit
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          requestBody:
            description: Specifies the amount to credit to the account balance.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UpdateBalanceRequest"
                examples:
                  small_credit:
                    summary: Small credit amount
                    value:
                      amount: 500
                  large_credit:
                    summary: Large credit amount
                    value:
                      amount: 5000
          responses:
            "200":
              description: Account credited successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    successful_credit:
                      summary: Account after successful credit
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 2000
            "400":
              description: Credit operation failed due to invalid amount
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    invalid_amount:
                      summary: Invalid amount error
                      value:
                        error_code: INVALID_INPUT
                        message: "Failed to credit account: Amount must be positive"
            "404":
              description: Credit operation failed - account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to credit account: Account does not exist"
            "500":
              description: Failed to process credit operation due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to credit account: Internal server error occurred"
    components:
      schemas:
        Account:
          type: object
          description: Represents a bank account with its core details including ID, type,
            and current balance.
          example:
            account_id: 123e4567-e89b-12d3-a456-426614174000
            type: checking
            balance: 1500
          properties:
            account_id:
              type: string
              format: uuid
              description: Unique identifier for the account (UUID v4)
              example: 123e4567-e89b-12d3-a456-426614174000
            type:
              type: string
              description: The type of the account (e.g., checking, savings)
              example: checking
            balance:
              type: number
              format: double
              description: The current balance of the account in the account's currency
              example: 1500
        CreateAccountRequest:
          type: object
          description: Request payload for creating a new account.
          example:
            type: savings
            initial_balance: 5000
          required:
            - type
            - initial_balance
          properties:
            type:
              type: string
              description: The type of account to create (e.g., checking, savings)
              example: savings
            initial_balance:
              type: number
              format: double
              description: The initial balance to fund the account with
              example: 5000
        UpdateBalanceRequest:
          type: object
          description: Request payload for updating an account's balance via credit or
            debit operations.
          example:
            amount: 100
          required:
            - amount
          properties:
            amount:
              type: number
              format: double
              description: The amount to credit or debit from the account
              example: 100
        ErrorResponse:
          type: object
          description: Standard error response structure for all error cases.
          example:
            error_code: NOT_FOUND
            message: The requested account does not exist.
          required:
            - error_code
            - message
          properties:
            error_code:
              type: string
              description: A standardized error code identifying the type of error
              example: NOT_FOUND
              enum:
                - INTERNAL_ERROR
                - NOT_FOUND
                - INSUFFICIENT_FUNDS
                - INVALID_INPUT
            message:
              type: string
              description: A human-readable description of the error
              example: The requested account does not exist.
  meta:
    id: spc_66aba6477e9048ab8cd85d3ac4d28496
    created: 1756758805299
    modified: 1756836876088
testSuites:
  - name: Accounts API Test Suite
    meta:
      id: uts_8243d232ed2948fcb258a4f9175f558c
      created: 1756832956658
      modified: 1756832967400
      sortKey: -1756832956658
    tests:
      - name: Returns 200
        meta:
          id: ut_994f9ef12065430db9f1fb728fcdf1d0
          created: 1756832993394
          modified: 1756833173947
          sortKey: -1756832993394
        requestId: req_9bd891858f9140c78082c984c1998cfb
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(201);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('account_id').that.is.a('string');
          expect(account).to.have.property('type').that.is.a('string');
          expect(account).to.have.property('balance').that.is.a('number');
      - name: Returns 200
        meta:
          id: ut_cfaf5bafe28049d5be66a0444b61614d
          created: 1756833183910
          modified: 1756833205322
          sortKey: -1756833183910
        requestId: req_ca3c2b408e93438598c15a3a084c92d5
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const accounts = JSON.parse(response.data);
          expect(accounts).to.be.an('array');

          if (accounts.length > 0) {
            const account = accounts[0];
            expect(account).to.have.property('account_id');
          }
      - name: Returns 200
        meta:
          id: ut_d5b38949be9b4d4099b3da93944a21c7
          created: 1756833251001
          modified: 1756833271040
          sortKey: -1756833251001
        requestId: req_2f90f0b02bd54bf79b6abf7c19e285ea
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const body = response.data;
          expect(body).to.be.a('string');
          expect(body.toLowerCase()).to.include('accounts api');
      - name: Returns 200
        meta:
          id: ut_e5ebfb540d154d1dbc368a61a8415a49
          created: 1756833298274
          modified: 1756833316057
          sortKey: -1756833298274
        requestId: req_4d8c92f4fecd4f2d92b794195a3dea75
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('balance').that.is.a('number');
      - name: Returns 200
        meta:
          id: ut_a13ce56d2cb64e3185539b3cbfc27737
          created: 1756833327352
          modified: 1756833340808
          sortKey: -1756833327352
        requestId: req_b017045e7fc44f67837c9756709da9e8
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('balance').that.is.a('number');
      - name: Returns 200
        meta:
          id: ut_0cd34ad41c23491f854596266914320d
          created: 1756833351310
          modified: 1756833368303
          sortKey: -1756833351310
        requestId: req_b583b07e3022412caf6fc2a9872c8506
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('account_id').that.is.a('string');
      - name: Returns 200
        meta:
          id: ut_ee665e73388a4cb393a9f31b032952d9
          created: 1756833963760
          modified: 1756833993249
          sortKey: -1756833963760
        requestId: req_29dbeb2810964fe0aae5367d4fad6a36
        code: >-
          const response = await insomnia.send();


          expect(response.status).to.equal(204);

          expect(response.data).to.satisfy((body) => body === '' || body ===
          null);
